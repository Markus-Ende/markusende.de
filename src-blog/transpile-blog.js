const fs = require('fs');
const path = require('path');
const html = require('html');
const { BlogEntryTranspiler, StateEnum } = require('./blog-entry-transpiler');

if (process.argv.length < 4) {
  console.log('ERROR: Provide blog transpilation source directory path and target file path as arguments.');
  process.exit(1);
}



const sourceDirectory = path.join(__dirname, '..', process.argv[2]);
const outputDirectory = path.join(__dirname, '..', process.argv[3]);
const outputMetadataJson = path.join(outputDirectory, 'blog-metadata.generated.json');
const outputHtmlTemplate = path.join(outputDirectory, 'blog-data.generated.html');
const outputBlogEntryIdEnum = path.join(outputDirectory, 'blog-entry-id.enum.generated.ts');
const blogMetadata = [];
let blogHtmlTemplate = '<!-- generated by transpile-blog.js -->\n\n<div [ngSwitch]="blogEntryId">';
let blogEntryIdEnum = '// generated by transpile-blog.js\n\nexport enum BlogEntryId {';

console.log(`Reading blog data from ${sourceDirectory}...`);

fs.readdirSync(sourceDirectory)
  .filter(file => file.endsWith('.md'))
  .map(file => {
    return {
      name: file.substr(0, file.length - '.md'.length),
      path: sourceDirectory + '/' + file
    };
  })
  .forEach(fileInfo => {
    const id = fileInfo.name;
    console.log(`read ${id}`);
    const content = fs.readFileSync(fileInfo.path).toString();
    const blogEntryTranspiler = new BlogEntryTranspiler(content);
    blogMetadata.push(Object.assign({id}, blogEntryTranspiler.getMetadata()));
    blogHtmlTemplate += `<div *ngSwitchCase="'${id}'">${blogEntryTranspiler.getContentAsHtml()}</div>`;
    blogEntryIdEnum += `\n  ${id.replace(/[^a-z0-9]/gi, '_').toUpperCase()} = <any>'${id}',`;
  });

blogHtmlTemplate += '</div>';
blogEntryIdEnum += '\n}\n';

console.log(`Writing blog metadata to ${outputMetadataJson}`);
fs.writeFileSync(outputMetadataJson, JSON.stringify(blogMetadata));
console.log(`Writing blog html template to ${outputHtmlTemplate}`);
fs.writeFileSync(outputHtmlTemplate, html.prettyPrint(blogHtmlTemplate));
console.log(`Writing blog entry id enum to ${outputBlogEntryIdEnum}`);
fs.writeFileSync(outputBlogEntryIdEnum, blogEntryIdEnum);
